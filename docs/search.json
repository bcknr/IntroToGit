[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This introductory workshop will cover the fundamentals of using Git and GitHub in Rstudio. With such a short workshop, I will only be able to get you started on your Git journey, but at the end, you should have a general workflow to start using Git in your research. We’ll learn how to install and link Git to Rstudio, create and clone a GitHub repo, practice the “pull - commit - push” process, and explore how Git can help you recover from programming disasters. Throughout, I’ll provide some tips for collaborating with others and increasing the reproducibility of your analyses.\n\n\n\n\n\n\nNote\n\n\n\nThis website will continue to be updated right up to the workshop. Check back for changes and updates. And feel free to ignore my typos. They will go away eventually.\n\n\n\nPre-workshop Homework\nInstalling and configuring Git and GitHub be finicky. To give us as much time as possible and to ensure that we all start on the right foot, please work through “Getting Started” prior to attending the workshop.\n\nFurther Reading:\nThis workshop pulls heavily from Jenny Bryan’s resource “Happy Git and GitHub for the useR”. As you continue learning to use Git, keep this resource close by."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "getting_started/questions.html",
    "href": "getting_started/questions.html",
    "title": "Questions?",
    "section": "",
    "text": "If you have questions or get stuck at any point create an issue by clicking “Report and Issue” on the right of every page. Note: a GitHub account is required to submit an issue.\nI encourage everyone to keep tabs on the issues in the workshop’s repo and answer each others questions! Feel free to use this as a place to work together as you continue to learn Git and GitHub."
  },
  {
    "objectID": "getting_started/questions.html#what-are-issues",
    "href": "getting_started/questions.html#what-are-issues",
    "title": "Questions?",
    "section": "What are issues?",
    "text": "What are issues?\nThe issues tab is the place in a repo to keep track of bugs, to-dos, feature requests, questions, and more. For the sake of simplicity, there are two main uses for those of us who generally use GitHub for data analysis:\n\nMany R packages use GitHub for development, and creating an issue is a great way to communicate directly with the package developers. If you are looking for help with a popular R package (think tidyverse) you are probably better off using resources like Stack Overflow. However, the issue tab can be a great resource for niche or uncommon packages. Just make sure to check that your question wasn’t already answered!\n\n\n\n\n\n\n\nTip - Minimal Reproducible Examples\n\n\n\nWhenever you ask a question or report a bug, create a Minimal Reproducible Example (MRE). There are many resources for learning about the best practices for MREs, such as this Stack Overflow answer.\n\n\n\nWhen collaborating with others using GitHub, the issues tab is a great place to communicate and keep organized. You can create to-dos or highlight bugs/errors in the analysis, assign collaborators to certain tasks, and label each issue with custom tags.\n\n\nCreating an Issue\nTo create an issue, navigate to the package or projects repo, click Issues -> New issue\n\n\n\n\n\n\n\n\nNote\n\n\n\nIssues support markdown styling, code chunks, and mentions. On the right, you will see options to add labels and to assign the issue to someone."
  },
  {
    "objectID": "getting_started/pat.html",
    "href": "getting_started/pat.html",
    "title": "Personal Access Token",
    "section": "",
    "text": "Personal Access Tokens (PATs) allow you to link your local Git repo with GitHub securely with HTTPS. If you have used GitHub in the past but not for a while, you may not be familiar with the use of Personal Access Tokens (PATs). In fact, you may remember using your GitHub password for everything."
  },
  {
    "objectID": "getting_started/pat.html#generating-a-pat",
    "href": "getting_started/pat.html#generating-a-pat",
    "title": "Personal Access Token",
    "section": "Generating a PAT",
    "text": "Generating a PAT\nYou can create a new PAT with the usethis package in R (recommended) or on GitHub.\n\nR (Recommended)GitHub\n\n\nIn R type:\n\nusethis::create_github_token()\n\nWhen you run this code, it will open GitHub in a browser window, just like if you create a PAT in GitHub alone (see other tab). However, some of the work has been done for you by usethis (and you didn’t have to spend any time navigating menus).\nIn the “Note” field, describe how you will use the token. Don’t worry too much about this for now, but if you use multiple PATs you will want to know what they are for in the future. I usually name it after where I will use the token or a certain project (e.g., linux_vm_R).\nBy default, PATs expire after 30 days. You can change the expiration date or select “no expiration.” The expiration date exists for the sake of security. It is up to you how you want to handle that.\nUnder “Select scopes,” the boxes next to “repo,” “workflow,” “gist,” and “user” should be checked automatically. I have yet to find the need to break from this basic usage.\nOnce satisfied, scroll to the bottom of the page and click the green “Generate Token” button. Your token will be displayed on the next page.\n\n\n\n\n\n\nSave your PAT\n\n\n\nOnce you navigate away from this page, you will not be able to see your PAT again. Now is your chance to copy the token and store it somewhere safe (I add mine to my password manager).\nNote: If you lose your PAT, you must generate a new token.\n\n\n\n\n\nClick on your profile picture in the upper right-hand corner of GitHub and select settings\n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n\n\nScroll down through your settings (this is also where you can set up your profile further) and select the last option in the menu on the left, Developer settings.\n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n\n\nSelect Personal access tokens -> Tokens (classic) -> Generate new token -> Generate new token (classic)\n \n \n\n\n\n\nIn the “Note” field, describe how you will use the token. Don’t worry too much about this for now, but if you use multiple PATs you will want to know what they are for in the future. I usually name it after where I will use the token or a certain project (e.g., linux_vm_R).\nBy default, PATs expire after 30 days. You can change the expiration date or select “no expiration.” The expiration date exists for the sake of security. It is up to you how you want to handle that.\nUnder “Select scopes” check the boxes next to “repo,” “workflow,” “gist,” and “user.” I have yet to find the need to break from this basic usage..\n\nOnce satisfied, scroll to the bottom of the page and click the green “Generate Token” button. Your token will be displayed on the next page.\n\n\n\n\n\n\nSave your PAT\n\n\n\nOnce you navigate away from this page, you will not be able to see your PAT again. Now is your chance to copy the token and store it somewhere safe (I add mine to my password manager).\nNote: If you lose your PAT, you must generate a new token."
  },
  {
    "objectID": "getting_started/pat.html#set-your-pat-in-r",
    "href": "getting_started/pat.html#set-your-pat-in-r",
    "title": "Personal Access Token",
    "section": "Set your PAT in R",
    "text": "Set your PAT in R\nFrom this point on, whenever you are prompted for your Github password in Rstudio, you will need to enter a valid PAT. If you are using Windows/Mac you can store your PAT directly in R using the package gitcreds:\n\ninstall.packages(\"gitcreds\")\n\nlibrary(gitcreds)\ngitcreds::gitcreds_set()\n\nIn Linux, setting your git credentials using gitcreds:: doesn’t store your credentials between sessions. Instead, you will have to enter your PAT when prompted to enter your GitHub password."
  },
  {
    "objectID": "getting_started/testlink.html",
    "href": "getting_started/testlink.html",
    "title": "Test Connection",
    "section": "",
    "text": "Lastly, we will check that our set-up worked by creating a new git repository. I won’t go into the details of what we are doing here– we will cover that during the workshop– but for now, trust the process."
  },
  {
    "objectID": "getting_started/testlink.html#create-a-repo",
    "href": "getting_started/testlink.html#create-a-repo",
    "title": "Test Connection",
    "section": "Create a Repo",
    "text": "Create a Repo\n\nLog in to your GitHub account and click  on the left hand side of the home page.\nName your repo, provide a brief description, check “Add a README file,” and then click\n\nClick  and copy the “HTTPS” link"
  },
  {
    "objectID": "getting_started/testlink.html#clone-your-repo",
    "href": "getting_started/testlink.html#clone-your-repo",
    "title": "Test Connection",
    "section": "Clone your Repo",
    "text": "Clone your Repo\n\nOpen RStudio and create a new project: File -> New Project… -> Version Control -> Git\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nError: RStudio can’t find Git\n\n\n\nDon’t see an option for Version Control? Jenny Bryan has a useful guide for troubleshooting just this!\n\n\n\nPaste the link you copied from GitHub in the Repository URL field. The Project directory name fill will be automatically populated with the name of your Repo on GitHub. Select a location to store your project. Take note of where you are saving your project. I store all of my version controlled (Git) projects in a subdirectory of my home directory named “github” (~/github). This has the benefit of keeping everything in one easy-to-find location. After you click create project, you may be prompted to enter your GitHub credentials.\n\n\n\n\n\n\n\nEntering Credentials\n\n\n\nRemember: whenever you are prompted to enter your GitHub password enter your PAT."
  },
  {
    "objectID": "getting_started/testlink.html#check-connection",
    "href": "getting_started/testlink.html#check-connection",
    "title": "Test Connection",
    "section": "Check connection",
    "text": "Check connection\nYou should now see a new Git tab in the “environment panel” in RStudio and a couple of new files in your project folder. To make sure everything is set up correctly and you can communicate with GitHub, we will “commit” our first change.\n\nNavigate to the project you just created in RStudio, open the README.md file, make a minor edit, and save your changes.\nYou should now see README.md in the Git tab\n\nCheck the Staged box next to REARME.md. Click  and then \nIn the window that popped up, type “update readme” in the commit box and hit commit\n\nA status window will open. If there are no errors, hit the close button and then \nOpen the repo on GitHub and check that your edits were made by looking at the README.md file.\n\n\n\n\n\n\n\nErrors and unexpected behavior\n\n\n\nIf you experience any problems with this step check Jenny Bryan’s troubleshooting guide."
  },
  {
    "objectID": "getting_started/installation.html",
    "href": "getting_started/installation.html",
    "title": "Installation",
    "section": "",
    "text": "Create a free account at github.com. Take time to consider your username– here is some helpful advice."
  },
  {
    "objectID": "getting_started/installation.html#install-git",
    "href": "getting_started/installation.html#install-git",
    "title": "Installation",
    "section": "2 Install Git",
    "text": "2 Install Git\nIf you do not have a current version of R or RStudio, install those first from here and here. If you already have the R and RStudio installed, consider updating to the most recent versions so we can more easily troubleshoot during the workshop. You can see the version I am using and how to check your current version below:\n\nR.version.string\n\n[1] \"R version 4.2.2 Patched (2022-11-10 r83330)\"\n\n\nThere are many options for installing Git. The following are just the most recommended and (generally) easiest options. Again, I’ll rely on Jenny Bryan to pick up my slack here. For alternative installation methods, or if you want more information, give Happy Git a visit.\nBefore trying to install Git, check to see if you already have it installed. Start by opening your flavor of shell (e.g., Terminal, Command Prompt) and type:\n\ngit --version\n\nIf you have Git installed, congratulations, you can skip to Section 3.\n\n2.1 Windows\nInstall Git for Windows.\n\n\n2.2 Mac\nInstall Git via the XCode command line tools by running\n\ngit --verion\ngit config\n\nor by directly installing the XCode tools\n\nxcode-select --install\n\n\n\n2.3 Linux\n\n2.3.1 Ubuntu/Debian\n\nsudo apt install git\n\n\n\n2.3.2 Fedora/Red Hat\n\nsudo yum install git"
  },
  {
    "objectID": "getting_started/installation.html#sec-linking",
    "href": "getting_started/installation.html#sec-linking",
    "title": "Installation",
    "section": "3 Link Git to R",
    "text": "3 Link Git to R\nThe R package usethis allows us to configure Git in R. Install usethis if you have not already and set your Git credentials using the same username and email you used to create your GitHub account.\n\ninstall.packages(\"usethis\")\n\nlibrary(usethis)\nuse_git_config(user.name = \"username\", user.email = \"email@cornell.edu\")"
  }
]